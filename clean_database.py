import os
from src.core.models import create_tables, engine, Base, Idea
from src.utils.logger import logger
from config.settings import settings
from sqlalchemy.orm import sessionmaker

def clean_database():
    """
    –û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–¥–µ–π (–Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫).
    """
    db_file = settings.database_url.replace("sqlite:///", "")
    
    logger.info(f"–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_file}")
    
    if not os.path.exists(db_file):
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        create_tables()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        Session = sessionmaker(bind=engine)
        session = Session()
        
        # –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ –∏–¥–µ–∏
        button_names = [
            "üìù –ú–æ–∏ –∏–¥–µ–∏",
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            "üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è",
            "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
            "‚ùì –ü–æ–º–æ—â—å",
            "–ú–æ–∏ –∏–¥–µ–∏",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "–ó–∞ —Å–µ–≥–æ–¥–Ω—è", 
            "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
            "–ü–æ–º–æ—â—å"
        ]
        
        # –£–¥–∞–ª—è–µ–º –∏–¥–µ–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
        deleted_count = 0
        for button_name in button_names:
            ideas_to_delete = session.query(Idea).filter(Idea.content == button_name).all()
            for idea in ideas_to_delete:
                session.delete(idea)
                deleted_count += 1
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∏–¥–µ—è —Å ID {idea.id}: '{idea.content}'")
        
        session.commit()
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–¥–µ–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–¥–µ–∏
        remaining_ideas = session.query(Idea).all()
        logger.info(f"–û—Å—Ç–∞–ª–æ—Å—å {len(remaining_ideas)} –∏–¥–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
        for idea in remaining_ideas:
            logger.info(f"  ID {idea.id}: '{idea.content[:50]}...' (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {idea.user_id})")
        
        session.close()
        logger.info("–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏.")

if __name__ == "__main__":
    clean_database()
